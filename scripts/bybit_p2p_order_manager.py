#!/usr/bin/env python3
"""
Bybit P2P Order Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ P2P –æ—Ä–¥–µ—Ä–∞–º–∏: —á–∞—Ç—ã, —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
"""

import sys
import json
import time
import hmac
import hashlib
import requests
import uuid
from typing import Dict, List, Optional, Tuple
from datetime import datetime

class P2POrderManager:
    def __init__(self, api_key: str, api_secret: str, testnet: bool = False):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api-testnet.bybit.com" if testnet else "https://api.bybit.com"
        
    def _make_request(self, endpoint: str, params: Dict = None, method: str = "POST") -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = self.base_url + endpoint
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
        timestamp = str(int(time.time() * 1000))
        recv_window = "5000"
        
        if method == "POST" and params:
            param_str = json.dumps(params, separators=(',', ':'), sort_keys=True)
            sign_str = timestamp + self.api_key + recv_window + param_str
        else:
            param_str = ""
            sign_str = timestamp + self.api_key + recv_window
            
        signature = hmac.new(
            self.api_secret.encode('utf-8'),
            sign_str.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        headers = {
            "X-BAPI-API-KEY": self.api_key,
            "X-BAPI-TIMESTAMP": timestamp,
            "X-BAPI-SIGN": signature,
            "X-BAPI-RECV-WINDOW": recv_window,
            "Content-Type": "application/json"
        }
        
        try:
            if method == "POST":
                response = requests.post(url, data=param_str, headers=headers, timeout=10)
            else:
                response = requests.get(url, headers=headers, timeout=10)
                
            if response.status_code == 200:
                return response.json()
            else:
                return {
                    "ret_code": -1,
                    "ret_msg": f"HTTP {response.status_code}: {response.text}"
                }
        except Exception as e:
            return {
                "ret_code": -1,
                "ret_msg": f"Request error: {str(e)}"
            }
    
    def get_orders(self, status: Optional[int] = None, page: int = 1, size: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ P2P –æ—Ä–¥–µ—Ä–æ–≤
        
        –°—Ç–∞—Ç—É—Å—ã:
        - 10: –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        - 20: –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
        - 30: –∞–ø–µ–ª–ª—è—Ü–∏—è
        - 40: –æ—Ç–º–µ–Ω–µ–Ω
        - 50: –∑–∞–≤–µ—Ä—à–µ–Ω
        """
        params = {
            "page": page,
            "size": size
        }
        
        if status is not None:
            params["status"] = status
            
        result = self._make_request("/v5/p2p/order/simplifyList", params)
        
        if result.get("ret_code") == 0:
            return result.get("result", {}).get("items", [])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {result.get('ret_msg')}")
            return []
    
    def get_pending_orders(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ (—Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π)"""
        params = {
            "page": 1,
            "size": 100
        }
        
        result = self._make_request("/v5/p2p/order/pending/simplifyList", params)
        
        if result.get("ret_code") == 0:
            items = result.get("result", {}).get("items", [])
            return items
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {result.get('ret_msg')}")
            return []
    
    def get_chat_messages(self, order_id: str, page: int = 1, size: int = 50) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        
        –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
        - 0: —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        - 1: —Ç–µ–∫—Å—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        - 2: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        - 5: —Ç–µ–∫—Å—Ç (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
        - 6: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
        - 7: pdf (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        - 8: –≤–∏–¥–µ–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        """
        params = {
            "orderId": order_id,
            "currentPage": str(page),
            "size": str(size)
        }
        
        result = self._make_request("/v5/p2p/order/message/listpage", params)
        
        if result.get("ret_code") == 0:
            return result.get("result", [])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {result.get('ret_msg')}")
            return []
    
    def send_message(self, order_id: str, message: str, content_type: str = "str", 
                    file_name: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ—Ä–¥–µ—Ä–∞
        
        Args:
            order_id: ID –æ—Ä–¥–µ—Ä–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ URL —Ñ–∞–π–ª–∞
            content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (str, pic, pdf, video)
            file_name: –ò–º—è —Ñ–∞–π–ª–∞ (–¥–ª—è –º–µ–¥–∏–∞)
        """
        params = {
            "orderId": order_id,
            "message": message,
            "contentType": content_type,
            "msgUuid": str(uuid.uuid4().hex)
        }
        
        if file_name:
            params["fileName"] = file_name
            
        result = self._make_request("/v5/p2p/order/message/send", params)
        
        if result.get("ret_code") == 0:
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('ret_msg')}")
            return False
    
    def release_assets(self, order_id: str) -> bool:
        """
        –û—Ç–ø—É—Å–∫–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –æ—Ä–¥–µ—Ä—É (–¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞)
        
        Args:
            order_id: ID –æ—Ä–¥–µ—Ä–∞
        """
        params = {
            "orderId": order_id
        }
        
        result = self._make_request("/v5/p2p/order/finish", params)
        
        if result.get("ret_code") == 0:
            print(f"‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –æ—Ä–¥–µ—Ä—É {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—É—â–µ–Ω—ã")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤: {result.get('ret_msg')}")
            return False
    
    def mark_as_paid(self, order_id: str) -> bool:
        """
        –û—Ç–º–µ—á–∞–µ—Ç –æ—Ä–¥–µ—Ä –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π (–¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
        
        Args:
            order_id: ID –æ—Ä–¥–µ—Ä–∞
        """
        params = {
            "orderId": order_id
        }
        
        result = self._make_request("/v5/p2p/order/pay", params)
        
        if result.get("ret_code") == 0:
            print(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: {result.get('ret_msg')}")
            return False
    
    def format_order_info(self, order: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        order_id = order.get("id", "Unknown")
        side = "–ü—Ä–æ–¥–∞–∂–∞" if order.get("side") == 1 else "–ü–æ–∫—É–ø–∫–∞"
        amount = order.get("amount", "0")
        currency = order.get("currencyId", "")
        token = order.get("tokenId", "USDT")
        price = order.get("price", "0")
        status = order.get("status", 0)
        
        status_text = {
            10: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            20: "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤",
            30: "–ê–ø–µ–ª–ª—è—Ü–∏—è",
            40: "–û—Ç–º–µ–Ω–µ–Ω",
            50: "–ó–∞–≤–µ—Ä—à–µ–Ω",
            60: "–û–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è",
            70: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã"
        }.get(status, f"–°—Ç–∞—Ç—É—Å {status}")
        
        counterparty = order.get("targetNickName", "Unknown")
        created = order.get("createDate", "")
        
        if created:
            created_dt = datetime.fromtimestamp(int(created) / 1000)
            created_str = created_dt.strftime("%Y-%m-%d %H:%M:%S")
        else:
            created_str = "Unknown"
        
        info = f"""
üìã –û—Ä–¥–µ—Ä: {order_id}
‚îú‚îÄ –¢–∏–ø: {side} {token}
‚îú‚îÄ –°—É–º–º–∞: {amount} {currency}
‚îú‚îÄ –ö—É—Ä—Å: {price} {currency}/{token}
‚îú‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}
‚îú‚îÄ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {counterparty}
‚îî‚îÄ –°–æ–∑–¥–∞–Ω: {created_str}
"""
        return info
    
    def format_message(self, msg: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        msg_type = msg.get("msgType", 0)
        content = msg.get("message", "")
        sender = msg.get("nickName", "Unknown")
        timestamp = msg.get("createDate", "")
        
        if timestamp:
            msg_dt = datetime.fromtimestamp(int(timestamp) / 1000)
            time_str = msg_dt.strftime("%H:%M:%S")
        else:
            time_str = "??:??:??"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if msg_type == 0:
            sender = "ü§ñ –°–∏—Å—Ç–µ–º–∞"
        elif msg_type in [5, 6]:
            sender = "üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        else:
            sender = f"üë§ {sender}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_type = msg.get("contentType", "str")
        if content_type == "pic":
            content = f"üì∑ [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {content}]"
        elif content_type == "pdf":
            content = f"üìÑ [PDF: {msg.get('fileName', 'document.pdf')}]"
        elif content_type == "video":
            content = f"üé• [–í–∏–¥–µ–æ: {msg.get('fileName', 'video.mp4')}]"
        
        return f"[{time_str}] {sender}: {content}"

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_data = sys.stdin.read()
        data = json.loads(input_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        api_key = data.get("api_key", "")
        api_secret = data.get("api_secret", "")
        action = data.get("action", "list_orders")
        testnet = data.get("testnet", False)
        
        if not api_key or not api_secret:
            result = {
                "ret_code": -1,
                "ret_msg": "API credentials required"
            }
            print(json.dumps(result))
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = P2POrderManager(api_key, api_secret, testnet)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "list_orders":
            # –°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
            status = data.get("status")
            orders = manager.get_orders(status=status)
            
            result = {
                "ret_code": 0,
                "ret_msg": "SUCCESS",
                "result": {
                    "orders": orders,
                    "count": len(orders)
                }
            }
            
        elif action == "get_pending":
            # –û–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
            orders = manager.get_pending_orders()
            
            result = {
                "ret_code": 0,
                "ret_msg": "SUCCESS",
                "result": {
                    "orders": orders,
                    "count": len(orders)
                }
            }
            
        elif action == "get_chat":
            # –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç
            order_id = data.get("order_id", "")
            if not order_id:
                result = {
                    "ret_code": -1,
                    "ret_msg": "order_id required"
                }
            else:
                messages = manager.get_chat_messages(order_id)
                result = {
                    "ret_code": 0,
                    "ret_msg": "SUCCESS",
                    "result": {
                        "messages": messages,
                        "count": len(messages)
                    }
                }
                
        elif action == "send_message":
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            order_id = data.get("order_id", "")
            message = data.get("message", "")
            
            if not order_id or not message:
                result = {
                    "ret_code": -1,
                    "ret_msg": "order_id and message required"
                }
            else:
                success = manager.send_message(order_id, message)
                result = {
                    "ret_code": 0 if success else -1,
                    "ret_msg": "SUCCESS" if success else "Failed to send message"
                }
                
        elif action == "release_assets":
            # –û—Ç–ø—É—Å—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
            order_id = data.get("order_id", "")
            
            if not order_id:
                result = {
                    "ret_code": -1,
                    "ret_msg": "order_id required"
                }
            else:
                success = manager.release_assets(order_id)
                result = {
                    "ret_code": 0 if success else -1,
                    "ret_msg": "SUCCESS" if success else "Failed to release assets"
                }
                
        else:
            result = {
                "ret_code": -1,
                "ret_msg": f"Unknown action: {action}"
            }
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(json.dumps(result))
        
    except Exception as e:
        error_result = {
            "ret_code": -1,
            "ret_msg": f"Script error: {str(e)}"
        }
        print(json.dumps(error_result))

if __name__ == "__main__":
    main()