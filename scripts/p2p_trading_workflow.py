#!/usr/bin/env python3
"""
P2P Trading Workflow
–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª P2P —Ç–æ—Ä–≥–æ–≤–ª–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ‚Üí –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ ‚Üí —á–∞—Ç ‚Üí –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
"""

import sys
import json
import time
from datetime import datetime
sys.path.append('.')

from scripts.bybit_smart_ad_creator import SmartAdCreator
from scripts.bybit_p2p_order_manager import P2POrderManager

class P2PTradingWorkflow:
    def __init__(self, api_key: str, api_secret: str):
        self.api_key = api_key
        self.api_secret = api_secret
        self.ad_creator = SmartAdCreator(api_key, api_secret)
        self.order_manager = P2POrderManager(api_key, api_secret)
        
    def create_ad_and_monitor(self, amount_rub: float):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ—Ä–¥–µ—Ä–∞
        """
        print(f"üöÄ P2P Trading Workflow")
        print(f"üíµ –°—É–º–º–∞: {amount_rub} RUB")
        print("=" * 60)
        
        # 1. –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
        ad_result = self.ad_creator.create_smart_ad({
            "amount": str(amount_rub),
            "remark": "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞ USDT. –û—Ç–ø—É—Å–∫–∞—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
        })
        
        if ad_result.get("ret_code") != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad_result.get('ret_msg')}")
            return False
        
        ad_id = ad_result.get("result", {}).get("itemId")
        print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {ad_id}")
        
        # 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("\nüëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        processed_orders = set()
        
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
                orders = self.order_manager.get_orders(status=20)  # –û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
                
                for order in orders:
                    order_id = order.get("id")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    if order_id in processed_orders:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à –æ—Ä–¥–µ—Ä (–ø—Ä–æ–¥–∞–∂–∞)
                    if order.get("side") == 1:  # –ú—ã –ø—Ä–æ–¥–∞–≤–µ—Ü
                        print(f"\nüîî –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä: {order_id}")
                        self.handle_order(order)
                        processed_orders.add(order_id)
                
                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(30)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        return True
    
    def handle_order(self, order: dict):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –æ—Ä–¥–µ—Ä
        """
        order_id = order.get("id")
        amount = order.get("amount", "0")
        currency = order.get("currencyId", "RUB")
        buyer = order.get("targetNickName", "Unknown")
        
        print(f"\nüíº –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}")
        print(f"   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer}")
        print(f"   –°—É–º–º–∞: {amount} {currency}")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.order_manager.send_message(
            order_id,
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã {amount} {currency}. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–∞–∑—É –æ—Ç–ø—É—â—É USDT."
        )
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        print("   üì® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        messages = self.order_manager.get_chat_messages(order_id)
        
        # –ò—â–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        payment_confirmed = self.check_payment_confirmation(messages)
        
        if payment_confirmed:
            print("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")
            
            # 3. –û—Ç–ø—É—Å–∫–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            print("   üí∏ –û—Ç–ø—É—Å–∫–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞...")
            success = self.order_manager.release_assets(order_id)
            
            if success:
                # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                self.order_manager.send_message(
                    order_id,
                    "‚úÖ USDT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–¥–µ–ª–∫—É!"
                )
                print("   ‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
        else:
            print("   ‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
            self.order_manager.send_message(
                order_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞."
            )
    
    def check_payment_confirmation(self, messages: list) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        """
        for msg in messages:
            content_type = msg.get("contentType", "")
            msg_type = msg.get("msgType", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã)
            if content_type == "pic" and msg_type == 2:
                return True
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            message_text = msg.get("message", "").lower()
            if any(word in message_text for word in ["–æ–ø–ª–∞—Ç–∏–ª", "–æ—Ç–ø—Ä–∞–≤–∏–ª", "–ø–µ—Ä–µ–≤–µ–ª", "paid", "sent"]):
                return True
                
        return False
    
    def monitor_active_ads(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        """
        print("\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        active_ads = self.ad_creator.get_active_ads()
        
        for ad in active_ads:
            ad_id = ad.get("id")
            price = ad.get("price")
            quantity = ad.get("quantity")
            frozen = ad.get("frozenQuantity", "0")
            last_qty = ad.get("lastQuantity", "0")
            payment_methods = []
            
            for term in ad.get("paymentTerms", []):
                payment_config = term.get("paymentConfig", {})
                payment_name = payment_config.get("paymentName", "Unknown")
                payment_methods.append(payment_name)
            
            print(f"\nüìå ID: {ad_id}")
            print(f"   –¶–µ–Ω–∞: {price} RUB/USDT")
            print(f"   –í—Å–µ–≥–æ: {quantity} USDT")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {last_qty} USDT")
            print(f"   –í —Å–¥–µ–ª–∫–∞—Ö: {frozen} USDT")
            print(f"   –ú–µ—Ç–æ–¥—ã: {', '.join(payment_methods)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:")
        active_orders = []
        
        for status in [10, 20]:  # –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
            orders = self.order_manager.get_orders(status=status)
            active_orders.extend(orders)
        
        if active_orders:
            for order in active_orders:
                print(self.order_manager.format_order_info(order))
        else:
            print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open("test_data/bybit_creditials.json", "r") as f:
        credentials = json.load(f)
    
    workflow = P2PTradingWorkflow(
        api_key=credentials["api_key"],
        api_secret=credentials["api_secret"]
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    print("ü§ñ P2P Trading Bot")
    print("=" * 60)
    print("1. –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –æ—Ä–¥–µ—Ä–∞")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ")
    
    if choice == "1":
        amount = input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB: ")
        try:
            amount_rub = float(amount)
            workflow.create_ad_and_monitor(amount_rub)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
            
    elif choice == "2":
        workflow.monitor_active_ads()
        
    else:
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()