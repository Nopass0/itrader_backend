use itrader_backend::ocr::PdfReceiptParser;
use std::path::PathBuf;

#[tokio::main]
async fn main() {
    let parser = PdfReceiptParser::new();
    let test_data_dir = PathBuf::from("test_data");
    
    let receipt_files = vec![
        "Receipt (8).pdf",
        "Receipt (9).pdf",
        "Receipt (10).pdf",
        "receipt_27.05.2025.pdf",
    ];
    
    println!("\nüß™ –ü–∞—Ä—Å–∏–Ω–≥ PDF —á–µ–∫–æ–≤\n");
    println!("{}", "=".repeat(50));
    
    for file_name in receipt_files {
        let file_path = test_data_dir.join(file_name);
        println!("\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {}", file_name);
        println!("{}", "-".repeat(50));
        
        match parser.parse_receipt(&file_path).await {
            Ok(info) => {
                println!("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!");
                println!("üìÖ –î–∞—Ç–∞/–í—Ä–µ–º—è:    {}", info.date_time.format("%Y-%m-%d %H:%M:%S UTC"));
                println!("üí∞ –°—É–º–º–∞:         {} ‚ÇΩ", info.amount);
                
                if let Some(bank) = &info.bank_name {
                    println!("üè¶ –ë–∞–Ω–∫:          {}", bank);
                }
                
                if let Some(tx_id) = &info.transaction_id {
                    println!("üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:    {}", tx_id);
                }
                
                if let Some(recipient) = &info.recipient {
                    println!("üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:    {}", recipient);
                }
                
                if let Some(sender) = &info.sender {
                    println!("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:   {}", sender);
                }
                
                if let Some(card) = &info.card_number {
                    println!("üí≥ –ö–∞—Ä—Ç–∞:         {}", card);
                }
                
                if let Some(phone) = &info.phone_number {
                    println!("üì± –¢–µ–ª–µ—Ñ–æ–Ω:       {}", phone);
                }
                
                if let Some(status) = &info.status {
                    println!("‚úîÔ∏è  –°—Ç–∞—Ç—É—Å:        {}", status);
                }
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e);
            }
        }
    }
    
    println!("\n{}", "=".repeat(50));
    println!("‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
}