use async_openai::{Client, config::OpenAIConfig, types::{CreateChatCompletionRequestArgs, ChatCompletionRequestMessage, ChatCompletionRequestSystemMessageArgs, ChatCompletionRequestUserMessageArgs, ChatCompletionRequestAssistantMessageArgs}};
use crate::core::config::AIConfig;
use crate::utils::error::{Result, AppError};
use serde::{Deserialize, Serialize};
use tracing::{info, error};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ChatMessage {
    pub role: String,
    pub content: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DialogueState {
    pub stage: DialogueStage,
    pub responses: DialogueResponses,
    pub completed: bool,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DialogueStage {
    Initial,
    AwaitingTBankConfirmation,
    AwaitingPdfConfirmation,
    AwaitingSbpWarningConfirmation,
    SendingPaymentDetails,
    AwaitingReceipt,
    Completed,
    Failed,
}

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct DialogueResponses {
    pub tbank_confirmed: Option<bool>,
    pub pdf_confirmed: Option<bool>,
    pub sbp_warning_confirmed: Option<bool>,
}

pub struct ChatManager {
    config: AIConfig,
    client: Option<Client<OpenAIConfig>>,
}

impl ChatManager {
    pub fn new(config: AIConfig) -> Self {
        let client = if !config.openrouter_api_key.is_empty() {
            let openai_config = OpenAIConfig::new()
                .with_api_key(&config.openrouter_api_key)
                .with_api_base("https://openrouter.ai/api/v1");
            Some(Client::with_config(openai_config))
        } else {
            None
        };
        
        Self { config, client }
    }
    
    pub fn get_initial_message() -> String {
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n\
        1. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —Å –¢ –±–∞–Ω–∫–∞?\n\
        ( –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞/–Ω–µ—Ç)\n\n\
        2. –ß–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–¥—Ñ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ—á—Ç—ã –¢ –±–∞–Ω–∫–∞ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ?\n\
        ( –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞/–Ω–µ—Ç)\n\n\
        3. –ü—Ä–∏ –°–ë–ü, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –±–∞–Ω–∫, –¥–µ–Ω—å–≥–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\
        ( –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é/ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é)\n\n\
        –ü–æ—Å–ª–µ —á–µ–≥–æ –æ–¥–Ω–∏–º —Å–º—Å —è –ø—Ä–∏—à–ª—é —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –±–∞–Ω–∫, –ø–æ—á—Ç—É –∏ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.".to_string()
    }
    
    pub async fn process_message(
        &self,
        dialogue_state: &DialogueState,
        user_message: &str,
    ) -> Result<(String, DialogueState)> {
        let mut new_state = dialogue_state.clone();
        
        match dialogue_state.stage {
            DialogueStage::Initial => {
                // Initial message already sent, should not reach here
                Ok((Self::get_initial_message(), new_state))
            }
            DialogueStage::AwaitingTBankConfirmation => {
                let (is_yes, response) = self.parse_yes_no_response(user_message).await?;
                new_state.responses.tbank_confirmed = Some(is_yes);
                
                if !is_yes {
                    new_state.stage = DialogueStage::Failed;
                    Ok(("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –¢ –±–∞–Ω–∫–æ–º. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.".to_string(), new_state))
                } else {
                    new_state.stage = DialogueStage::AwaitingPdfConfirmation;
                    Ok((response, new_state))
                }
            }
            DialogueStage::AwaitingPdfConfirmation => {
                let (is_yes, response) = self.parse_yes_no_response(user_message).await?;
                new_state.responses.pdf_confirmed = Some(is_yes);
                
                if !is_yes {
                    new_state.stage = DialogueStage::Failed;
                    Ok(("–ß–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.".to_string(), new_state))
                } else {
                    new_state.stage = DialogueStage::AwaitingSbpWarningConfirmation;
                    Ok((response, new_state))
                }
            }
            DialogueStage::AwaitingSbpWarningConfirmation => {
                let (is_confirmed, response) = self.parse_confirmation_response(user_message).await?;
                new_state.responses.sbp_warning_confirmed = Some(is_confirmed);
                
                if !is_confirmed {
                    new_state.stage = DialogueStage::Failed;
                    Ok(("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –°–ë–ü. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.".to_string(), new_state))
                } else {
                    new_state.stage = DialogueStage::SendingPaymentDetails;
                    Ok((response, new_state))
                }
            }
            DialogueStage::SendingPaymentDetails => {
                // This stage is handled by the system sending payment details
                new_state.stage = DialogueStage::AwaitingReceipt;
                Ok(("–û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.".to_string(), new_state))
            }
            DialogueStage::AwaitingReceipt => {
                // Keep waiting for receipt
                Ok(("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.".to_string(), new_state))
            }
            DialogueStage::Completed | DialogueStage::Failed => {
                Ok(("–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.".to_string(), new_state))
            }
        }
    }
    
    pub fn get_payment_details_message(
        &self,
        phone: &str,
        bank: &str,
        email: &str,
        amount: f64,
    ) -> String {
        format!(
            "‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–Ω—è—Ç—ã. –í–æ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n\
            üí∞ –°—É–º–º–∞: {} RUB\n\
            üè¶ –ë–∞–Ω–∫: {}\n\
            üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}\n\
            üìß Email –¥–ª—è —á–µ–∫–∞: {}\n\n\
            –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —á–µ–∫ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ—á—Ç—ã –¢ –±–∞–Ω–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email.",
            amount, bank, phone, email
        )
    }
    
    async fn parse_yes_no_response(&self, message: &str) -> Result<(bool, String)> {
        let normalized = message.trim().to_lowercase();
        
        // Simple parsing first
        if normalized.contains("–¥–∞") || normalized.contains("yes") {
            return Ok((true, "–ü—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.".to_string()));
        }
        if normalized.contains("–Ω–µ—Ç") || normalized.contains("no") {
            return Ok((false, "–ü–æ–Ω—è—Ç–Ω–æ.".to_string()));
        }
        
        // If we have AI client, use it for complex parsing
        if let Some(client) = &self.client {
            match self.ai_parse_yes_no(client, message).await {
                Ok(result) => Ok(result),
                Err(e) => {
                    error!("AI parsing failed: {}", e);
                    // Fallback to asking again
                    Ok((false, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.".to_string()))
                }
            }
        } else {
            Ok((false, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.".to_string()))
        }
    }
    
    async fn parse_confirmation_response(&self, message: &str) -> Result<(bool, String)> {
        let normalized = message.trim().to_lowercase();
        
        if normalized.contains("–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é") || normalized.contains("confirm") {
            return Ok((true, "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.".to_string()));
        }
        if normalized.contains("–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é") || normalized.contains("not confirm") {
            return Ok((false, "–ü–æ–Ω—è—Ç–Ω–æ.".to_string()));
        }
        
        // If we have AI client, use it
        if let Some(client) = &self.client {
            match self.ai_parse_confirmation(client, message).await {
                Ok(result) => Ok(result),
                Err(e) => {
                    error!("AI parsing failed: {}", e);
                    Ok((false, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é' –∏–ª–∏ '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'.".to_string()))
                }
            }
        } else {
            Ok((false, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é' –∏–ª–∏ '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é'.".to_string()))
        }
    }
    
    async fn ai_parse_yes_no(&self, client: &Client<OpenAIConfig>, message: &str) -> Result<(bool, String)> {
        let request = CreateChatCompletionRequestArgs::default()
            .model(&self.config.model)
            .messages([
                ChatCompletionRequestSystemMessageArgs::default()
                    .content("You are parsing user responses to yes/no questions in Russian. \
                             Respond with JSON: {\"is_yes\": true/false, \"response\": \"appropriate Russian response\"}")
                    .build()?
                    .into(),
                ChatCompletionRequestUserMessageArgs::default()
                    .content(format!("Parse this response: {}", message))
                    .build()?
                    .into(),
            ])
            .temperature(0.1)
            .build()?;
            
        let response = client.chat().create(request).await?;
        let content = response.choices.first()
            .ok_or_else(|| AppError::InternalError("No AI response".to_string()))?
            .message.content.as_ref()
            .ok_or_else(|| AppError::InternalError("Empty AI response".to_string()))?;
            
        let parsed: serde_json::Value = serde_json::from_str(content)
            .map_err(|e| AppError::InternalError(format!("Failed to parse AI response: {}", e)))?;
            
        Ok((
            parsed["is_yes"].as_bool().unwrap_or(false),
            parsed["response"].as_str().unwrap_or("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ.").to_string()
        ))
    }
    
    async fn ai_parse_confirmation(&self, client: &Client<OpenAIConfig>, message: &str) -> Result<(bool, String)> {
        let request = CreateChatCompletionRequestArgs::default()
            .model(&self.config.model)
            .messages([
                ChatCompletionRequestSystemMessageArgs::default()
                    .content("You are parsing user responses to confirmation requests in Russian. \
                             User should confirm they understand SBP risks. \
                             Respond with JSON: {\"is_confirmed\": true/false, \"response\": \"appropriate Russian response\"}")
                    .build()?
                    .into(),
                ChatCompletionRequestUserMessageArgs::default()
                    .content(format!("Parse this response: {}", message))
                    .build()?
                    .into(),
            ])
            .temperature(0.1)
            .build()?;
            
        let response = client.chat().create(request).await?;
        let content = response.choices.first()
            .ok_or_else(|| AppError::InternalError("No AI response".to_string()))?
            .message.content.as_ref()
            .ok_or_else(|| AppError::InternalError("Empty AI response".to_string()))?;
            
        let parsed: serde_json::Value = serde_json::from_str(content)
            .map_err(|e| AppError::InternalError(format!("Failed to parse AI response: {}", e)))?;
            
        Ok((
            parsed["is_confirmed"].as_bool().unwrap_or(false),
            parsed["response"].as_str().unwrap_or("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ.").to_string()
        ))
    }
}